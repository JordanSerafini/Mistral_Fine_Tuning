{"messages":[{"role":"user","content":"Montre-moi tous les projets en cours"},{"role":"assistant","content":"SELECT p.*, c.firstname || ' ' || c.lastname as client_name FROM projects p JOIN clients c ON p.client_id = c.id WHERE p.status = 'en_cours' ORDER BY p.start_date DESC;"}]}
{"messages":[{"role":"user","content":"Crée un nouveau projet pour le client Dupont"},{"role":"assistant","content":"INSERT INTO projects (client_id, name, description, status, start_date) VALUES ((SELECT id FROM clients WHERE lastname = 'Dupont' LIMIT 1), 'Nouveau projet Dupont', 'Description du projet', 'en_cours', CURRENT_DATE);"}]}
{"messages":[{"role":"user","content":"Recherche tous les projets terminés depuis 2023"},{"role":"assistant","content":"SELECT p.*, c.firstname || ' ' || c.lastname as client_name FROM projects p JOIN clients c ON p.client_id = c.id WHERE p.status = 'termine' AND p.end_date >= '2023-01-01' ORDER BY p.end_date DESC;"}]}
{"messages":[{"role":"user","content":"Met à jour le statut du projet 123 à terminé"},{"role":"assistant","content":"UPDATE projects SET status = 'termine', end_date = CURRENT_DATE, updated_at = CURRENT_TIMESTAMP WHERE id = 123;"}]}
{"messages":[{"role":"user","content":"Trouve tous les projets dans la ville de Paris"},{"role":"assistant","content":"SELECT p.*, c.firstname || ' ' || c.lastname as client_name FROM projects p JOIN clients c ON p.client_id = c.id WHERE p.city ILIKE 'Paris' ORDER BY p.created_at DESC;"}]}
{"messages":[{"role":"user","content":"Liste les projets avec un budget supérieur à 50000€"},{"role":"assistant","content":"SELECT p.*, c.firstname || ' ' || c.lastname as client_name, pb.total_budget FROM projects p JOIN clients c ON p.client_id = c.id JOIN project_budgets pb ON p.id = pb.project_id WHERE pb.total_budget > 50000 ORDER BY pb.total_budget DESC;"}]}
{"messages":[{"role":"user","content":"Cherche les projets qui n'ont pas encore démarré"},{"role":"assistant","content":"SELECT p.*, c.firstname || ' ' || c.lastname as client_name FROM projects p JOIN clients c ON p.client_id = c.id WHERE p.start_date > CURRENT_DATE OR p.start_date IS NULL ORDER BY p.created_at DESC;"}]}
{"messages":[{"role":"user","content":"Affiche les projets avec leurs étapes en cours"},{"role":"assistant","content":"SELECT p.*, s.name as stage_name, s.status as stage_status, c.firstname || ' ' || c.lastname as client_name FROM projects p JOIN stages s ON p.id = s.project_id JOIN clients c ON p.client_id = c.id WHERE s.status = 'en_cours' ORDER BY p.start_date, s.order_index;"}]}
{"messages":[{"role":"user","content":"Liste les projets qui nécessitent des matériaux spécifiques"},{"role":"assistant","content":"SELECT p.*, m.name as material_name, pm.quantity FROM projects p JOIN project_materials pm ON p.id = pm.project_id JOIN materials m ON pm.material_id = m.id WHERE p.status = 'en_cours' ORDER BY p.created_at DESC;"}]}
{"messages":[{"role":"user","content":"Trouve les projets qui dépassent leur budget initial"},{"role":"assistant","content":"SELECT p.*, pb.total_budget, SUM(e.amount) as total_expenses FROM projects p JOIN project_budgets pb ON p.id = pb.project_id JOIN expenses e ON p.id = e.project_id GROUP BY p.id, pb.total_budget HAVING SUM(e.amount) > pb.total_budget;"}]}
{"messages":[{"role":"user","content":"Montre les projets avec le plus d'heures travaillées"},{"role":"assistant","content":"SELECT p.*, c.firstname || ' ' || c.lastname as client_name, SUM(te.hours) as total_hours FROM projects p JOIN timesheet_entries te ON p.id = te.project_id JOIN clients c ON p.client_id = c.id GROUP BY p.id, c.firstname, c.lastname ORDER BY total_hours DESC LIMIT 10;"}]}
{"messages":[{"role":"user","content":"Recherche les projets qui ont des factures impayées"},{"role":"assistant","content":"SELECT p.*, i.reference as invoice_ref, i.total_ttc, i.due_date FROM projects p JOIN invoices i ON p.id = i.project_id WHERE i.status = 'en_retard' OR (i.status = 'envoyée' AND i.due_date < CURRENT_DATE) ORDER BY i.due_date;"}]}
{"messages":[{"role":"user","content":"Liste les projets par ordre de rentabilité"},{"role":"assistant","content":"SELECT p.*, c.firstname || ' ' || c.lastname as client_name, (SELECT SUM(total_ttc) FROM invoices WHERE project_id = p.id) - (SELECT COALESCE(SUM(amount), 0) FROM expenses WHERE project_id = p.id) as profit FROM projects p JOIN clients c ON p.client_id = c.id WHERE p.status = 'termine' ORDER BY profit DESC;"}]}
{"messages":[{"role":"user","content":"Affiche les projets qui requièrent une intervention urgente"},{"role":"assistant","content":"SELECT p.*, ce.title as event_title, ce.start_date FROM projects p JOIN calendar_events ce ON p.id = ce.project_id WHERE ce.event_type = 'intervention_urgente' AND ce.start_date >= CURRENT_DATE ORDER BY ce.start_date;"}]}
{"messages":[{"role":"user","content":"Trouve les projets avec le plus de devis acceptés"},{"role":"assistant","content":"SELECT p.*, COUNT(q.id) as accepted_quotes, SUM(q.total) as total_amount FROM projects p JOIN quotations q ON p.id = q.project_id WHERE q.status = 'accepté' GROUP BY p.id ORDER BY accepted_quotes DESC;"}]}
{"messages":[{"role":"user","content":"Liste les projets par équipe assignée"},{"role":"assistant","content":"SELECT p.*, array_agg(s.firstname || ' ' || s.lastname) as team_members FROM projects p JOIN project_staff ps ON p.id = ps.project_id JOIN staff s ON ps.staff_id = s.id WHERE p.status = 'en_cours' GROUP BY p.id ORDER BY p.start_date;"}]}
{"messages":[{"role":"user","content":"Montre les projets avec leurs équipements réservés"},{"role":"assistant","content":"SELECT p.*, e.name as equipment_name, er.start_date, er.end_date FROM projects p JOIN equipment_reservations er ON p.id = er.project_id JOIN equipment e ON er.equipment_id = e.id WHERE er.start_date <= CURRENT_DATE AND er.end_date >= CURRENT_DATE ORDER BY er.start_date;"}]}
{"messages":[{"role":"user","content":"Trouve tous les projets avec leurs devis associés"},{"role":"assistant","content":"SELECT p.*, c.firstname || ' ' || c.lastname as client_name, array_agg(jsonb_build_object('devis_ref', q.reference, 'montant', q.total, 'statut', q.status)) as devis FROM projects p JOIN clients c ON p.client_id = c.id LEFT JOIN quotations q ON p.id = q.project_id GROUP BY p.id, c.firstname, c.lastname ORDER BY p.created_at DESC;"}]}
{"messages":[{"role":"user","content":"Montre les projets avec leurs factures et paiements"},{"role":"assistant","content":"SELECT p.*, i.reference as facture_ref, i.total_ttc, array_agg(jsonb_build_object('date_paiement', pay.payment_date, 'montant', pay.amount, 'methode', pay.payment_method)) as paiements FROM projects p JOIN invoices i ON p.id = i.project_id LEFT JOIN payments pay ON i.id = pay.invoice_id GROUP BY p.id, i.reference, i.total_ttc ORDER BY p.start_date DESC;"}]}
{"messages":[{"role":"user","content":"Recherche les projets avec leur planning complet"},{"role":"assistant","content":"SELECT p.*, c.firstname || ' ' || c.lastname as client_name, array_agg(DISTINCT jsonb_build_object('evenement', ce.title, 'type', ce.event_type, 'date_debut', ce.start_date, 'date_fin', ce.end_date)) as planning FROM projects p JOIN clients c ON p.client_id = c.id LEFT JOIN calendar_events ce ON p.id = ce.project_id WHERE p.status = 'en_cours' GROUP BY p.id, c.firstname, c.lastname ORDER BY p.start_date;"}]}
{"messages":[{"role":"user","content":"Liste les projets avec leur équipe et les heures travaillées"},{"role":"assistant","content":"SELECT p.*, array_agg(DISTINCT jsonb_build_object('staff', s.firstname || ' ' || s.lastname, 'role', ps.role, 'heures_total', COALESCE((SELECT SUM(hours) FROM timesheet_entries te WHERE te.staff_id = s.id AND te.project_id = p.id), 0))) as equipe FROM projects p JOIN project_staff ps ON p.id = ps.project_id JOIN staff s ON ps.staff_id = s.id GROUP BY p.id ORDER BY p.created_at DESC;"}]}
{"messages":[{"role":"user","content":"Affiche les projets avec leurs matériaux et fournisseurs"},{"role":"assistant","content":"SELECT p.*, array_agg(DISTINCT jsonb_build_object('materiel', m.name, 'quantite', pm.quantity, 'fournisseur', sup.name)) as materiaux FROM projects p JOIN project_materials pm ON p.id = pm.project_id JOIN materials m ON pm.material_id = m.id LEFT JOIN suppliers sup ON m.id = sup.id GROUP BY p.id ORDER BY p.start_date;"}]}
{"messages":[{"role":"user","content":"Trouve les projets avec leurs devis et factures en attente"},{"role":"assistant","content":"SELECT p.*, array_agg(DISTINCT jsonb_build_object('devis_ref', q.reference, 'montant_devis', q.total)) as devis_en_attente, array_agg(DISTINCT jsonb_build_object('facture_ref', i.reference, 'montant_du', i.total_ttc)) as factures_impayees FROM projects p LEFT JOIN quotations q ON p.id = q.project_id AND q.status = 'en_attente' LEFT JOIN invoices i ON p.id = i.project_id AND i.status IN ('envoyée', 'en_retard') GROUP BY p.id;"}]}
{"messages":[{"role":"user","content":"Liste les projets avec leurs étapes et responsables"},{"role":"assistant","content":"SELECT p.*, array_agg(DISTINCT jsonb_build_object('etape', s.name, 'status', s.status, 'responsable', st.firstname || ' ' || st.lastname, 'debut', s.start_date, 'fin', s.end_date)) as etapes FROM projects p LEFT JOIN stages s ON p.id = s.project_id LEFT JOIN staff st ON s.staff_id = st.id GROUP BY p.id ORDER BY p.start_date DESC;"}]}
{"messages":[{"role":"user","content":"Montre les projets avec leurs dépenses par catégorie"},{"role":"assistant","content":"SELECT p.*, array_agg(DISTINCT jsonb_build_object('categorie', ec.name, 'total_depenses', SUM(e.amount))) as depenses_par_categorie FROM projects p LEFT JOIN expenses e ON p.id = e.project_id LEFT JOIN expense_categories ec ON e.category_id = ec.id GROUP BY p.id, ec.name ORDER BY p.created_at DESC;"}]}
{"messages":[{"role":"user","content":"Recherche les projets avec leurs équipements réservés et maintenance"},{"role":"assistant","content":"SELECT p.*, array_agg(DISTINCT jsonb_build_object('equipement', e.name, 'periode', er.start_date || ' à ' || er.end_date, 'maintenance', mr.maintenance_date)) as equipements FROM projects p JOIN equipment_reservations er ON p.id = er.project_id JOIN equipment e ON er.equipment_id = e.id LEFT JOIN maintenance_records mr ON e.id = mr.equipment_id GROUP BY p.id ORDER BY p.start_date;"}]}
{"messages":[{"role":"user","content":"Affiche les projets avec leur historique d'activités"},{"role":"assistant","content":"SELECT p.*, array_agg(DISTINCT jsonb_build_object('action', al.action, 'details', al.details, 'date', al.created_at, 'utilisateur', u.firstname || ' ' || u.lastname)) as activites FROM projects p LEFT JOIN activity_logs al ON p.id = (al.details->>'project_id')::integer LEFT JOIN users u ON al.user_id = u.id GROUP BY p.id ORDER BY p.updated_at DESC;"}]}
{"messages":[{"role":"user","content":"Trouve tous les projets avec leurs devis en attente et le statut du projet"},{"role":"assistant","content":"SELECT p.*, q.reference as devis_ref, q.total, q.status as devis_status FROM projects p LEFT JOIN quotations q ON p.id = q.project_id WHERE p.status::project_status = 'en_cours' AND q.status::quotation_status = 'en_attente' ORDER BY q.created_date DESC;"}]}
{"messages":[{"role":"user","content":"Liste les projets avec leurs événements de type réunion de chantier à venir"},{"role":"assistant","content":"SELECT p.*, ce.title, ce.start_date, ce.end_date FROM projects p JOIN calendar_events ce ON p.id = ce.project_id WHERE ce.event_type::event_type = 'reunion_chantier' AND ce.start_date > CURRENT_TIMESTAMP AND p.status::project_status IN ('prospect', 'en_cours') ORDER BY ce.start_date;"}]}
{"messages":[{"role":"user","content":"Affiche les projets avec leurs activités de création ou modification récentes"},{"role":"assistant","content":"SELECT p.*, al.action::activity_type, al.created_at, al.details FROM projects p JOIN activity_logs al ON al.entity_type = 'project' AND al.entity_id = p.id WHERE al.action::activity_type IN ('create', 'update', 'modification') AND al.created_at > CURRENT_DATE - INTERVAL '30 days' ORDER BY al.created_at DESC;"}]}
{"messages":[{"role":"user","content":"Trouve les projets avec leurs devis acceptés et factures associées"},{"role":"assistant","content":"SELECT p.*, q.reference as devis_ref, q.total as devis_total, i.reference as facture_ref, i.total_ttc, i.status::invoice_status FROM projects p JOIN quotations q ON p.id = q.project_id LEFT JOIN invoices i ON p.id = i.project_id WHERE q.status::quotation_status = 'accepté' ORDER BY p.created_at DESC;"}]}
{"messages":[{"role":"user","content":"Liste les projets avec leurs documents techniques"},{"role":"assistant","content":"SELECT p.*, array_agg(DISTINCT jsonb_build_object('type', de.document_type::document_type, 'content', de.content)) as documents FROM projects p LEFT JOIN document_embeddings de ON p.id = de.document_id WHERE de.document_type::document_type IN ('plan', 'rapport', 'contrat') GROUP BY p.id ORDER BY p.updated_at DESC;"}]}
{"messages":[{"role":"user","content":"Montre les projets avec leurs produits de devis par catégorie"},{"role":"assistant","content":"SELECT p.*, q.reference, array_agg(DISTINCT jsonb_build_object('categorie', qp.category::product_category, 'produit', qp.product_name, 'montant', qp.unit_price * qp.quantity)) as produits FROM projects p JOIN quotations q ON p.id = q.project_id JOIN quotation_products qp ON q.id = qp.quotation_id GROUP BY p.id, q.reference ORDER BY p.created_at DESC;"}]}
{"messages":[{"role":"user","content":"Affiche les projets avec leurs paiements par méthode"},{"role":"assistant","content":"SELECT p.*, i.reference, array_agg(DISTINCT jsonb_build_object('methode', pay.payment_method::payment_method, 'montant', pay.amount)) as paiements FROM projects p JOIN invoices i ON p.id = i.project_id JOIN payments pay ON i.id = pay.invoice_id GROUP BY p.id, i.reference ORDER BY p.updated_at DESC;"}]}
{"messages":[{"role":"user","content":"Trouve les projets avec leurs événements urgents"},{"role":"assistant","content":"SELECT p.*, array_agg(DISTINCT jsonb_build_object('evenement', ce.title, 'date', ce.start_date)) as urgences FROM projects p JOIN calendar_events ce ON p.id = ce.project_id WHERE ce.event_type::event_type = 'intervention_urgente' AND ce.start_date >= CURRENT_DATE GROUP BY p.id ORDER BY ce.start_date;"}]}
{"messages":[{"role":"user","content":"Liste les projets avec leur historique de changements de statut"},{"role":"assistant","content":"SELECT p.*, array_agg(DISTINCT jsonb_build_object('ancien_statut', (al.details->>'old_status')::project_status, 'nouveau_statut', (al.details->>'new_status')::project_status, 'date', al.created_at)) as historique_statuts FROM projects p JOIN activity_logs al ON al.entity_type = 'project' AND al.entity_id = p.id WHERE al.action::activity_type = 'update' AND al.details ? 'old_status' GROUP BY p.id ORDER BY p.updated_at DESC;"}]}
{"messages":[{"role":"user","content":"Montre les projets avec leurs devis refusés et les raisons"},{"role":"assistant","content":"SELECT p.*, q.reference, q.total, q.notes, al.details->>'reason' as raison_refus FROM projects p JOIN quotations q ON p.id = q.project_id JOIN activity_logs al ON al.entity_type = 'quotation' AND al.entity_id = q.id WHERE q.status::quotation_status = 'refusé' AND al.action::activity_type = 'refus' ORDER BY q.updated_at DESC;"}]}
{"messages":[{"role":"user","content":"Trouve les projets avec leur progression dans les étapes"},{"role":"assistant","content":"SELECT p.*, array_agg(jsonb_build_object('etape', s.name, 'status', s.status, 'progression', CASE WHEN s.end_date IS NOT NULL THEN 100 WHEN s.start_date IS NOT NULL THEN (EXTRACT(DAY FROM CURRENT_DATE - s.start_date)::float / s.duration_days * 100) ELSE 0 END)) as etapes FROM projects p JOIN stages s ON p.id = s.project_id WHERE p.status::project_status = 'en_cours' GROUP BY p.id ORDER BY p.start_date;"}]}
{"messages":[{"role":"user","content":"Liste les projets avec leur rentabilité détaillée"},{"role":"assistant","content":"SELECT p.*, pb.total_budget, (SELECT SUM(q.total) FROM quotations q WHERE q.project_id = p.id AND q.status::quotation_status = 'accepté') as revenus, (SELECT SUM(e.amount) FROM expenses e WHERE e.project_id = p.id) as depenses, (SELECT SUM(te.hours * te.hourly_rate) FROM timesheet_entries te WHERE te.project_id = p.id) as cout_main_oeuvre FROM projects p LEFT JOIN project_budgets pb ON p.id = pb.project_id WHERE p.status::project_status IN ('en_cours', 'termine') ORDER BY p.end_date DESC;"}]}
{"messages":[{"role":"user","content":"Affiche les projets avec leurs équipements et maintenance"},{"role":"assistant","content":"SELECT p.*, array_agg(DISTINCT jsonb_build_object('equipement', e.name, 'statut', e.status, 'derniere_maintenance', mr.maintenance_date, 'prochaine_maintenance', mr.next_maintenance_date)) as equipements FROM projects p JOIN equipment_reservations er ON p.id = er.project_id JOIN equipment e ON er.equipment_id = e.id LEFT JOIN maintenance_records mr ON e.id = mr.equipment_id WHERE p.status::project_status = 'en_cours' GROUP BY p.id ORDER BY p.updated_at;"}]}
{"messages":[{"role":"user","content":"Trouve les projets avec leurs fournisseurs et commandes"},{"role":"assistant","content":"SELECT p.*, array_agg(DISTINCT jsonb_build_object('fournisseur', s.name, 'commande_ref', so.reference, 'montant', so.total_amount, 'statut', so.status, 'livraison_prevue', so.expected_delivery_date)) as commandes FROM projects p JOIN supplier_orders so ON p.id = so.project_id JOIN suppliers s ON so.supplier_id = s.id WHERE p.status::project_status IN ('en_cours', 'en_pause') GROUP BY p.id ORDER BY p.created_at DESC;"}]}
{"messages":[{"role":"user","content":"Liste les projets avec leurs événements de calendrier par type"},{"role":"assistant","content":"SELECT p.*, array_agg(DISTINCT jsonb_build_object('type', ce.event_type::event_type, 'evenements', (SELECT json_agg(json_build_object('titre', c2.title, 'date', c2.start_date)) FROM calendar_events c2 WHERE c2.project_id = p.id AND c2.event_type = ce.event_type))) as calendrier FROM projects p JOIN calendar_events ce ON p.id = ce.project_id WHERE p.status::project_status != 'annule' GROUP BY p.id ORDER BY p.start_date;"}]}
{"messages":[{"role":"user","content":"Montre les projets avec leur historique complet d'activités"},{"role":"assistant","content":"SELECT p.*, array_agg(DISTINCT jsonb_build_object('date', al.created_at, 'action', al.action::activity_type, 'details', al.details, 'utilisateur', u.firstname || ' ' || u.lastname)) as activites FROM projects p JOIN activity_logs al ON al.entity_type = 'project' AND al.entity_id = p.id LEFT JOIN users u ON al.user_id = u.id WHERE p.created_at >= CURRENT_DATE - INTERVAL '90 days' GROUP BY p.id ORDER BY p.updated_at DESC;"}]}
{"messages":[{"role":"user","content":"Affiche les projets avec leurs témoignages clients"},{"role":"assistant","content":"SELECT p.*, array_agg(DISTINCT jsonb_build_object('client', c.firstname || ' ' || c.lastname, 'note', t.rating, 'commentaire', t.comment, 'publie', t.is_published)) as temoignages FROM projects p JOIN testimonials t ON p.id = t.project_id JOIN clients c ON t.client_id = c.id WHERE p.status::project_status = 'termine' GROUP BY p.id ORDER BY p.end_date DESC;"}]}
{"messages":[{"role":"user","content":"Trouve les projets avec leurs services standards utilisés"},{"role":"assistant","content":"SELECT p.*, array_agg(DISTINCT jsonb_build_object('service', ss.name, 'categorie', ss.category, 'prix_moyen', (ss.avg_price_min + ss.avg_price_max)/2, 'duree_prevue', ss.avg_duration_days)) as services FROM projects p JOIN quotation_products qp ON p.id = qp.quotation_id JOIN standard_services ss ON qp.product_name ILIKE ss.name WHERE p.status::project_status IN ('prospect', 'en_cours') GROUP BY p.id ORDER BY p.created_at DESC;"}]}
{"messages":[{"role":"user","content":"Liste les projets avec leur analyse financière complète"},{"role":"assistant","content":"WITH projet_finances AS (SELECT p.id, SUM(q.total) as total_devis, SUM(i.total_ttc) as total_facture, SUM(pay.amount) as total_paye, SUM(e.amount) as total_depenses FROM projects p LEFT JOIN quotations q ON p.id = q.project_id LEFT JOIN invoices i ON p.id = i.project_id LEFT JOIN payments pay ON i.id = pay.invoice_id LEFT JOIN expenses e ON p.id = e.project_id GROUP BY p.id) SELECT p.*, pf.total_devis, pf.total_facture, pf.total_paye, pf.total_depenses, pb.total_budget, CASE WHEN p.status::project_status = 'termine' THEN ((pf.total_paye - pf.total_depenses) / NULLIF(pb.total_budget, 0) * 100) END as rentabilite_pourcentage FROM projects p LEFT JOIN projet_finances pf ON p.id = pf.id LEFT JOIN project_budgets pb ON p.id = pb.project_id ORDER BY p.end_date DESC;"}]}
{"messages":[{"role":"user","content":"Montre les projets avec leurs documents techniques et métadonnées"},{"role":"assistant","content":"SELECT p.*, array_agg(DISTINCT jsonb_build_object('type', de.document_type::document_type, 'contenu', de.content, 'metadata', p.search_metadata)) as documents, array_agg(DISTINCT jsonb_build_object('terme', tg.term, 'definition', tg.definition)) as glossaire_associe FROM projects p LEFT JOIN document_embeddings de ON p.id = de.document_id LEFT JOIN technical_glossary tg ON p.search_metadata->>'domaine' = tg.category WHERE p.status::project_status != 'annule' GROUP BY p.id ORDER BY p.updated_at DESC;"}]}
{"messages":[{"role":"user","content":"Analyse les projets avec leurs KPIs complets"},{"role":"assistant","content":"WITH projet_kpis AS (SELECT p.id, COUNT(DISTINCT q.id) as nb_devis, COUNT(DISTINCT i.id) as nb_factures, COUNT(DISTINCT ce.id) as nb_evenements, COUNT(DISTINCT s.id) as nb_etapes, AVG(t.rating) as satisfaction_moyenne FROM projects p LEFT JOIN quotations q ON p.id = q.project_id LEFT JOIN invoices i ON p.id = i.project_id LEFT JOIN calendar_events ce ON p.id = ce.project_id LEFT JOIN stages s ON p.id = s.project_id LEFT JOIN testimonials t ON p.id = t.project_id GROUP BY p.id) SELECT p.*, pk.*, CASE WHEN p.end_date IS NOT NULL AND p.start_date IS NOT NULL THEN p.end_date - p.start_date ELSE NULL END as duree_reelle FROM projects p JOIN projet_kpis pk ON p.id = pk.id WHERE p.status::project_status != 'annule' ORDER BY p.created_at DESC;"}]}
{"messages":[{"role":"user","content":"Liste les projets avec leur historique de modifications par type d'activité"},{"role":"assistant","content":"SELECT p.*, array_agg(DISTINCT jsonb_build_object('type_activite', al.action::activity_type, 'modifications', (SELECT json_agg(json_build_object('date', al2.created_at, 'details', al2.details, 'utilisateur', u.firstname || ' ' || u.lastname)) FROM activity_logs al2 JOIN users u ON al2.user_id = u.id WHERE al2.entity_type = 'project' AND al2.entity_id = p.id AND al2.action = al.action ORDER BY al2.created_at DESC))) as historique_modifications FROM projects p JOIN activity_logs al ON al.entity_type = 'project' AND al.entity_id = p.id GROUP BY p.id ORDER BY p.updated_at DESC;"}]}
{"messages":[{"role":"user","content":"Trouve les projets avec leur analyse de performance équipe"},{"role":"assistant","content":"SELECT p.*, array_agg(DISTINCT jsonb_build_object('membre', s.firstname || ' ' || s.lastname, 'role', ps.role, 'heures_travaillees', SUM(te.hours), 'cout_total', SUM(te.hours * te.hourly_rate), 'evenements_assignes', COUNT(DISTINCT ce.id))) as performance_equipe FROM projects p JOIN project_staff ps ON p.id = ps.project_id JOIN staff s ON ps.staff_id = s.id LEFT JOIN timesheet_entries te ON p.id = te.project_id AND te.staff_id = s.id LEFT JOIN calendar_events ce ON p.id = ce.project_id AND ce.staff_id = s.id WHERE p.status::project_status = 'en_cours' GROUP BY p.id, s.id ORDER BY p.start_date;"}]}
{"messages":[{"role":"user","content":"Affiche les projets avec leur suivi budgétaire détaillé"},{"role":"assistant","content":"WITH budget_suivi AS (SELECT p.id, pb.total_budget, SUM(e.amount) FILTER (WHERE e.category_id IN (SELECT id FROM expense_categories WHERE name LIKE '%matériel%')) as cout_materiel, SUM(te.hours * te.hourly_rate) as cout_main_oeuvre, SUM(e.amount) FILTER (WHERE e.category_id IN (SELECT id FROM expense_categories WHERE name LIKE '%transport%')) as cout_transport FROM projects p LEFT JOIN project_budgets pb ON p.id = pb.project_id LEFT JOIN expenses e ON p.id = e.project_id LEFT JOIN timesheet_entries te ON p.id = te.project_id GROUP BY p.id, pb.total_budget) SELECT p.*, bs.*, CASE WHEN bs.total_budget > 0 THEN ((bs.cout_materiel + bs.cout_main_oeuvre + bs.cout_transport) / bs.total_budget * 100) ELSE NULL END as pourcentage_utilisation FROM projects p JOIN budget_suivi bs ON p.id = bs.id WHERE p.status::project_status IN ('en_cours', 'termine') ORDER BY p.updated_at DESC;"}]}
{"messages":[{"role":"user","content":"Montre les projets avec leur analyse des risques"},{"role":"assistant","content":"SELECT p.*, array_agg(DISTINCT jsonb_build_object('type_evenement', ce.event_type::event_type, 'urgences', COUNT(*) FILTER (WHERE ce.event_type = 'intervention_urgente'), 'retards', COUNT(*) FILTER (WHERE ce.end_date > ce.start_date + INTERVAL '1 day'), 'conflits', COUNT(*) FILTER (WHERE EXISTS (SELECT 1 FROM calendar_events ce2 WHERE ce2.id != ce.id AND ce2.project_id = p.id AND ce2.start_date < ce.end_date AND ce2.end_date > ce.start_date)))) as analyse_risques FROM projects p LEFT JOIN calendar_events ce ON p.id = ce.project_id WHERE p.status::project_status = 'en_cours' GROUP BY p.id ORDER BY p.start_date;"}]}
{"messages":[{"role":"user","content":"Liste les projets avec leur analyse de la chaîne d'approvisionnement"},{"role":"assistant","content":"SELECT p.*, array_agg(DISTINCT jsonb_build_object('fournisseur', s.name, 'commandes', COUNT(so.id), 'delai_moyen', AVG(so.actual_delivery_date - so.order_date), 'montant_total', SUM(so.total_amount), 'retards', COUNT(*) FILTER (WHERE so.actual_delivery_date > so.expected_delivery_date))) as analyse_approvisionnement FROM projects p JOIN supplier_orders so ON p.id = so.project_id JOIN suppliers s ON so.supplier_id = s.id WHERE p.status::project_status IN ('en_cours', 'termine') GROUP BY p.id, s.id ORDER BY p.created_at DESC;"}]}
{"messages":[{"role":"user","content":"Trouve les projets avec leur analyse de satisfaction client"},{"role":"assistant","content":"SELECT p.*, c.firstname || ' ' || c.lastname as client_name, array_agg(DISTINCT jsonb_build_object('evaluation', t.rating, 'commentaire', t.comment, 'date', t.created_at, 'interactions', (SELECT COUNT(*) FROM calendar_events ce WHERE ce.project_id = p.id AND ce.client_id = c.id), 'reclamations', (SELECT COUNT(*) FROM activity_logs al WHERE al.entity_type = 'project' AND al.entity_id = p.id AND al.action::activity_type = 'commentaire' AND al.details->>'type' = 'reclamation'))) as satisfaction_client FROM projects p JOIN clients c ON p.client_id = c.id LEFT JOIN testimonials t ON p.id = t.project_id WHERE p.status::project_status IN ('en_cours', 'termine') GROUP BY p.id, c.firstname, c.lastname ORDER BY p.updated_at DESC;"}]}
{"messages":[{"role":"user","content":"Affiche les projets avec leur analyse de rentabilité par phase"},{"role":"assistant","content":"WITH phase_rentabilite AS (SELECT p.id, s.name as phase_name, SUM(e.amount) as cout_phase, SUM(te.hours * te.hourly_rate) as cout_main_oeuvre_phase, (SELECT SUM(qp.quantity * qp.unit_price) FROM quotations q JOIN quotation_products qp ON q.id = qp.quotation_id WHERE q.project_id = p.id AND q.status::quotation_status = 'accepté' AND qp.description ILIKE '%' || s.name || '%') as revenu_phase FROM projects p JOIN stages s ON p.id = s.project_id LEFT JOIN expenses e ON p.id = e.project_id AND e.description ILIKE '%' || s.name || '%' LEFT JOIN timesheet_entries te ON p.id = te.project_id AND te.description ILIKE '%' || s.name || '%' GROUP BY p.id, s.name) SELECT p.*, array_agg(jsonb_build_object('phase', pr.phase_name, 'rentabilite', COALESCE(pr.revenu_phase, 0) - COALESCE(pr.cout_phase, 0) - COALESCE(pr.cout_main_oeuvre_phase, 0))) as rentabilite_phases FROM projects p JOIN phase_rentabilite pr ON p.id = pr.id GROUP BY p.id ORDER BY p.end_date DESC;"}]}
{"messages":[{"role":"user","content":"Montre les projets avec leur analyse des délais"},{"role":"assistant","content":"SELECT p.*, array_agg(DISTINCT jsonb_build_object('etape', s.name, 'duree_prevue', s.duration_days, 'duree_reelle', CASE WHEN s.end_date IS NOT NULL AND s.start_date IS NOT NULL THEN EXTRACT(DAY FROM s.end_date - s.start_date) END, 'retard', CASE WHEN s.end_date > s.start_date + (s.duration_days || ' days')::interval THEN EXTRACT(DAY FROM (s.end_date - (s.start_date + (s.duration_days || ' days')::interval))) END)) as analyse_delais, (SELECT AVG(EXTRACT(DAY FROM (actual_delivery_date - expected_delivery_date))) FROM supplier_orders WHERE project_id = p.id AND actual_delivery_date > expected_delivery_date) as retard_moyen_livraisons FROM projects p LEFT JOIN stages s ON p.id = s.project_id WHERE p.status::project_status IN ('en_cours', 'termine') GROUP BY p.id ORDER BY p.start_date;"}]}
{"messages":[{"role":"user","content":"Liste les projets avec leur analyse des coûts imprévus"},{"role":"assistant","content":"WITH couts_imprevus AS (SELECT p.id, SUM(e.amount) FILTER (WHERE e.description ILIKE '%imprévu%' OR e.description ILIKE '%urgence%') as total_imprevus, COUNT(DISTINCT ce.id) FILTER (WHERE ce.event_type::event_type = 'intervention_urgente') as nb_interventions_urgentes, SUM(te.hours * te.hourly_rate) FILTER (WHERE te.description ILIKE '%urgence%') as cout_main_oeuvre_urgence FROM projects p LEFT JOIN expenses e ON p.id = e.project_id LEFT JOIN calendar_events ce ON p.id = ce.project_id LEFT JOIN timesheet_entries te ON p.id = te.project_id GROUP BY p.id) SELECT p.*, ci.*, CASE WHEN pb.total_budget > 0 THEN (ci.total_imprevus / pb.total_budget * 100) END as pourcentage_imprevus_budget FROM projects p JOIN couts_imprevus ci ON p.id = ci.id LEFT JOIN project_budgets pb ON p.id = pb.project_id WHERE p.status::project_status != 'annule' ORDER BY p.created_at DESC;"}]}
